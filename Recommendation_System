CODE>>>

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import pairwise_distances

# Sample data
dt = { 'User'  : ['User1', 'User1', 'User1', 'User2', 'User2', 'User2', 'User3', 'User3', 'User3','User4','User4','User4'],
       'Movie' : ['Movie1', 'Movie2', 'Movie3', 'Movie1', 'Movie2', 'Movie4', 'Movie2', 'Movie3', 'Movie4', 'Movie1', 'Movie2', 'Movie4'],
       'Rating': [5, 4, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5]
     }

# Create DataFrame
df = pd.DataFrame(dt)

# Create a pivot table
pivot_table = df.pivot_table(index='User', columns='Movie', values='Rating').fillna(0)

# Calculate cosine similarity
us = cosine_similarity(pivot_table)
usdf = pd.DataFrame(us, index=pivot_table.index, columns=pivot_table.index)

# Function to get recommendations
def get_recommendations(user, pivot_table, usdf, num_recommendations=2):
    
    # Get the user's ratings
    usr = pivot_table.loc[user]
    
    # Calculate weighted sum of ratings of similar users
    smusr = usdf[user]
    wsm = pivot_table.T.dot(smusr) / smusr.sum()
    
    # Filter out already rated movies
    recommendations = wsm[usr == 0]
    
    # Sort and return top recommendations
    return recommendations.sort_values(ascending=False).head(num_recommendations)

# Example usage
user = 'User1'
recommendations = get_recommendations(user, pivot_table, usdf)
print(f"Recommendations for {user}:\n{recommendations}")
print("\n")


# Example usage
user = 'User2'
recommendations = get_recommendations(user, pivot_table, usdf)
print(f"Recommendations for {user}:\n{recommendations}")
print("\n")

# Example usage
user = 'User3'
recommendations = get_recommendations(user, pivot_table, usdf)
print(f"Recommendations for {user}:\n{recommendations}")


# dt - data
# User_Similarity - us
# user_similarity_df - usdf
# user_ratings - usr
# similar_users - smusr
# weighted_sum - wsm 



OUTPUT>>>

C:\>python --version
Python 3.12.3

C:\>pip install pandas scikit-learn
Requirement already satisfied: pandas in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (2.1.1)
Collecting scikit-learn
  Downloading scikit_learn-1.5.0-cp312-cp312-win_amd64.whl.metadata (11 kB)
Requirement already satisfied: numpy>=1.26.0 in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (from pandas) (1.26.1)
Requirement already satisfied: python-dateutil>=2.8.2 in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2023.3.post1)
Requirement already satisfied: tzdata>=2022.1 in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (from pandas) (2023.3)
Collecting scipy>=1.6.0 (from scikit-learn)
  Downloading scipy-1.13.1-cp312-cp312-win_amd64.whl.metadata (60 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.6/60.6 kB 799.0 kB/s eta 0:00:00
Collecting joblib>=1.2.0 (from scikit-learn)
  Downloading joblib-1.4.2-py3-none-any.whl.metadata (5.4 kB)
Collecting threadpoolctl>=3.1.0 (from scikit-learn)
  Downloading threadpoolctl-3.5.0-py3-none-any.whl.metadata (13 kB)
Requirement already satisfied: six>=1.5 in c:\users\sahithi\appdata\local\programs\python\python312\lib\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)
Downloading scikit_learn-1.5.0-cp312-cp312-win_amd64.whl (10.9 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 10.9/10.9 MB 4.2 MB/s eta 0:00:00
Downloading joblib-1.4.2-py3-none-any.whl (301 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 301.8/301.8 kB 6.3 MB/s eta 0:00:00
Downloading scipy-1.13.1-cp312-cp312-win_amd64.whl (45.9 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 45.9/45.9 MB 5.6 MB/s eta 0:00:00
Downloading threadpoolctl-3.5.0-py3-none-any.whl (18 kB)
Installing collected packages: threadpoolctl, scipy, joblib, scikit-learn
Successfully installed joblib-1.4.2 scikit-learn-1.5.0 scipy-1.13.1 threadpoolctl-3.5.0

C:\script>python recommendation_System.py
Recommendations for User1:
Movie
Movie4    2.441685
dtype: float64

Recommendations for User2:
Movie
Movie3    1.424555
dtype: float64

Recommendations for User3:
Movie
Movie1    2.449243
dtype: float64


EXPLAINATION>>>
Create the Data:

Let's create a simple dataset where rows represent users, columns represent movies, and values represent ratings.

Collaborative Filtering:

We'll use the user-based collaborative filtering approach.

Data Preparation: The sample data is created and transformed into a pivot table where users are rows, movies are columns, and ratings are the values.

Similarity Calculation: The cosine similarity between users is calculated.

Recommendation Function: The function get_recommendations calculates the weighted sum of ratings from similar users and returns the top N recommendations for the specified user.

Data Preparation:
A dictionary dt is created containing user ratings for different movies.
This data is converted into a pandas DataFrame df.

Pivot Table Creation:
The DataFrame df is transformed into a pivot table pivot_table where rows represent users, columns represent movies, and the values are the ratings. Missing values are filled with 0.

Cosine Similarity Calculation:
The cosine similarity between users is calculated using the pivot table and stored in us.
The similarity matrix us is converted to a DataFrame usdf for better readability.

Recommendation Function:
The function get_recommendations takes a user, the pivot table, the user similarity DataFrame, and the number of recommendations as input.

Inside the function:

usr: Retrieves the ratings of the specified user.

smusr: Gets the similarity scores of the specified user with all other users.

wsm: Calculates a weighted sum of ratings from similar users.
Recommendations are filtered to exclude movies the user has already rated.
The top N recommendations are returned.

Example Usage:
The function is called for User1, User2, and User3 to get their respective movie recommendations, which are then printed.
Simplified Variables Description
dt: Sample data containing user ratings for movies.
df: DataFrame created from the sample data.
pivot_table: Transformed DataFrame with users as rows, movies as columns, and ratings as values.
us: Cosine similarity matrix showing how similar each user is to every other user.
usdf: DataFrame version of us for readability.
usr: Ratings of the specified user.
smusr: Similarity scores of the specified user with other users.
wsm: Weighted sum of ratings from users similar to the specified user.
